<?php
/**
 * @file
 * Main code file for Persona.
 */

/**
 * Implements hook_init().
 */
function persona_init() {
  global $user;
  // Add JavaScript settings.
  $settings = array(
    'email' => isset($user->mail) ? $user->mail : NULL,
  );
  if ($user->uid == 0) {
    // The browser is not logged in.
    $settings += array(
      // Token to prevent login CSRF.
      'token' => persona_csrf_token(),
      // Add site name to display on Persona form.
      'site_name' => variable_get('site_name'),
    );
    // Add the legal documents if they are both provided.
    if ((variable_get('persona_terms_link') != '') &&
      (variable_get('persona_privacy_link') != ''))
    {
      $settings += array(
        'terms_link' => url(variable_get('persona_terms_link'), array('absolute' => TRUE)),
        'privacy_link' => url(variable_get('persona_privacy_link'), array('absolute' => TRUE)),
      );
    }
    // Site logo can only be displayed on Persona login form if it can be served
    // over HTTPS.
    if (!empty($_SERVER['HTTPS']) && theme_get_setting('logo') != '') {
      $settings['site_logo'] = theme_get_setting('logo');
    }
  }
  drupal_add_js(array('persona' => $settings), "setting");
  // Include the Persona JavaScript library at the bottom of the body.
  drupal_add_js('https://login.persona.org/include.js', array(
    'type' => 'external',
    'scope' => 'footer',
  ));
}

/**
 * Implements hook_menu().
 */
function persona_menu() {
  $items['persona/verify'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'persona_verify',
    'delivery callback' => 'drupal_json_output',
    'access callback' => TRUE,
  );
  $items['admin/config/people/persona'] = array(
    'title' => "Persona settings",
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('persona_admin_form'),
    'description' => "Configure settings for signing in with Mozilla Persona.",
    'file' => 'persona.admin.inc',
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function persona_menu_alter(&$items) {
  if (variable_get('persona_takeover_login')) {
    unset($items['user/register']);
    unset($items['user/password']);
  }
}

/**
 * Personafies login forms.
 */
function _persona_login_form_alter(array &$form) {
  if (variable_get('persona_login_display')) {
    $form['persona'] = array(
      '#markup' => persona_link(),
      '#weight' => -1,
    );
  }
  if (variable_get('persona_takeover_login')) {
    unset($form['name']);
    unset($form['pass']);
    unset($form['actions']);
  }
  else {
    $form['or'] = array(
      '#markup' => t("<p>Or log in below:</p>"),
      '#weight' => 0,
    );
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function persona_form_user_profile_form_alter(array &$form, array &$form_state, $form_id) {
  if (variable_get('persona_takeover_login')) {
    unset($form['account']['pass']);
    unset($form['account']['current_pass']);
    unset($form['account']['current_pass_required_values']);
    $form['account']['mail']['#description'] .= " " . t("If you change this e-mail after creating an account using Persona, you will have to re-validate your Persona e-mail.");
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function persona_form_user_login_alter(array &$form, array &$form_state, $form_id) {
  _persona_login_form_alter($form);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function persona_form_user_login_block_alter(array &$form, array &$form_state, $form_id) {
  _persona_login_form_alter($form);
  if (variable_get('persona_takeover_login')) {
    // Remove links to disabled menu items.
    unset($form['links']);
  }
}

/**
 * Determines if a user with a specific name already exists.
 *
 * @param string $name
 *   User name to check for.
 *
 * @return bool
 *   TRUE if the name is taken.
 */
function _persona_user_name_exists($name) {
  // Search for a user entity with the supplied name.
  $query = new EntityFieldQuery;
  return (bool) $query->entityCondition('entity_type', 'user')
    ->propertyCondition('name', $name)
    ->count()
    ->execute();
}

/**
 * Extracts a unique name from an email address.
 *
 * @param string $email
 *   Email address to extract name from.
 *
 * @return string
 *   Unique extracted name. No existing users will have this name.
 */
function _persona_extract_user_name($email) {
  // Extract the local-part from the email address.
  $name = strtok($email, '@');
  // Ensure it is unique.
  if (_persona_user_name_exists($name)) {
    $i = 2;
    do {
      $attempt = $name . '-' . $i++;

    } while (_persona_user_name_exists($attempt));
    $name = $attempt;
  }
  return $name;
}

/**
 * Callback function to validate the persona assertion.
 */
function persona_verify() {
  global $base_url;
  global $user;

  // Check if we are already signed in. Verification may have already happened
  // from another tab in the same browser.
  if ($user->uid > 0) {
    drupal_add_http_header('Status', '409 Conflict');
    return;
  }

  // Check token.
  if (isset($_POST['assertion']) && isset($_POST['token']) && ($_POST['token'] == persona_csrf_token())) {
    $assertion = check_plain($_POST['assertion']);
  }
  else {
    watchdog('persona', "Bad assertion or token.", array(), WATCHDOG_ERROR);
    drupal_set_message(t("Sorry, there was a problem signing you in via Persona."), "error");
    drupal_add_http_header('Status', '401 Unauthorized');
    return;
  }
  // Verify the assertion via the persona API.
  $result = drupal_http_request("https://verifier.login.persona.org/verify", array(
    "method" => "POST",
    'headers' => array('Content-Type' => 'application/x-www-form-urlencoded'),
    "data" => "assertion=$assertion&audience=$base_url",
  ));
  // HTTP Status should be 200, and response should return 'okay'.
  $response = (object) drupal_json_decode($result->data);
  if ($result->code !== '200' || $response->status !== 'okay') {
    watchdog('persona', "Bad response: @response; HTTP code: @code", array('@response' => var_export((array) $response, TRUE), '@code' => $result->code), WATCHDOG_ERROR);
    drupal_set_message(t("Sorry, there was a problem signing you in via Persona."), "error");
    drupal_add_http_header('Status', '502 Bad Gateway');
    return;
  }
  // Check to see if this user already exists.
  $account = user_load_by_mail($response->email);

  // If account exists...
  if (!empty($account)) {
    // If user is allowed to log in...
    if ($account->status == 1) {
      watchdog('persona', "Sign in to existing account by %email successful.", array('%email' => $response->email));
      persona_login_user($account);
      drupal_add_http_header('Status', '200 OK');
    }
    else {
      watchdog('persona', "Sign in by %email to blocked account denied.", array('%email' => $response->email), WATCHDOG_WARNING);
      drupal_set_message(t("You are not allowed to sign in at this time."), "error");
      drupal_add_http_header('Status', '403 Forbidden');
    }
  }
  elseif (variable_get('user_register')) {
    // Need to create an account for this user.
    $fields = array(
      'name' => _persona_extract_user_name($response->email),
      'mail' => $response->email,
      'pass' => user_password(16),
      'status' => (variable_get('user_register') == USER_REGISTER_VISITORS),
      'init' => $response->email,
      'roles' => array(DRUPAL_AUTHENTICATED_RID => 'authenticated user'),
    );
    $account = user_save(array(), $fields);

    if (variable_get('user_register') == USER_REGISTER_VISITORS) {
      watchdog('persona', "Sign in to new account by %email successful.", array('%email' => $response->email));
      // Login the user.
      persona_login_user($account);
      drupal_add_http_header('Status', '201 Created');
    }
    else {
      watchdog('persona', "Account created during sign in by %email pending approval.", array('%email' => $response->email));
      _user_mail_notify('register_pending_approval', $account);
      drupal_set_message(t("Thank you for applying for an account. Your account is currently pending approval by the site administrator.<br />In the meantime, a welcome message with further instructions has been sent to your e-mail address."));
      drupal_add_http_header('Status', '403 Forbidden');
    }
  }
  else {
    // Visitors cannot create accounts.
    watchdog('persona', "Attempted sign in without an account by %email.", array('%email' => $response->email), WATCHDOG_WARNING);
    drupal_set_message(t("Only administrators are permitted to register new accounts on this website."), "error");
    drupal_add_http_header('Status', '403 Forbidden');
  }
}

/**
 * Logs in a user.
 */
function persona_login_user($account) {
  global $user;
  $user = $account;
  user_login_finalize();
}

/**
 * Returns a Persona sign in link.
 */
function persona_link() {
  $classes = array("persona-login");
  switch (variable_get("persona_login_button_style")) {
    case "dark":
      $classes[] = "dark ";
      $classes[] = "persona-button ";
      break;

    case "blue":
      $classes[] = "persona-button ";
      break;

    case "orange":
      $classes[] = "orange ";
      $classes[] = "persona-button ";
      break;

  }
  $text = variable_get("persona_login_button_text");
  return l("<span>$text</span>", NULL, array(
    "attributes" => array("class" => $classes),
    "fragment" => "persona_login",
    "html" => TRUE,
  ));
}

/**
 * Creates a secure token for preventing Login CSRF.
 *
 * @return string
 *   Secure token.
 *
 * @see drupal_get_token()
 * @see http://www.adambarth.com/papers/2008/barth-jackson-mitchell-b.pdf
 */
function persona_csrf_token() {
  return drupal_hmac_base64('persona-csrf-token', session_api_get_sid() . drupal_get_private_key() . drupal_get_hash_salt());
}
