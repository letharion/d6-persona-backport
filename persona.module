<?php
/**
 * @file
 * Main code file for Persona.
 */

/**
 * Implements hook_init().
 */
function persona_init() {
  global $user;
  session_api_start_session();
  drupal_add_js("https://login.persona.org/include.js", "external");
  // Add user email so Persona is aware of loggedInUser.
  if (!isset($user->mail)) {
    $user->mail = NULL;
  }
  drupal_add_js(array('persona' => array('user' => array('mail' => $user->mail))), "setting");
  // Add token to help authenticate user actions.
  drupal_add_js(array('persona' => array('token' => persona_get_token('persona-secure-token'))), "setting");
  // Add site name to display on Persona form.
  drupal_add_js(array('persona' => array('site' => array("name" => variable_get('site_name')))), "setting");
  // Add paths for js to use.
  drupal_add_js(array('persona' => array('site' => array('logout' => url('user/logout', array('absolute' => TRUE))))), "setting");
  drupal_add_js(array('persona' => array('site' => array('personaVerify' => url('persona/verify', array('absolute' => TRUE))))), "setting");
  // Add logo to Persona form if HTTPS is available.
  // WILL NOT WORK without HTTPS.
  if (!empty($_SERVER['HTTPS']) && theme_get_setting('logo') != "") {
    drupal_add_js(array('persona' => array("site" => array('logo' => theme_get_setting('logo')))), "setting");
  }
}

/**
 * Implements hook_menu().
 */
function persona_menu() {
  $items['persona/verify'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'persona_verify',
    'delivery callback' => 'drupal_json_output',
    'access callback' => TRUE,
  );
  $items['persona/logout'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'persona_logout',
    'access callback' => TRUE,
  );
  $items['admin/config/people/persona'] = array(
    'title' => 'Persona Settings',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('persona_admin_form'),
    'description' => 'Configure settings for Mozilla Persona.',
    'file' => 'persona.admin.inc',
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function persona_menu_alter(&$items) {
  if (variable_get('persona_takeover_login')) {
    unset($items['user/register']);
    unset($items['user/password']);
  }
}

/**
 * Menu callback to logout and end a user session.
 */
function persona_logout() {
  global $user;
  session_destroy();
  print "";
}

/**
 * Personafies login forms.
 */
function _persona_login_form_alter(array &$form) {
  if (variable_get('persona_login_display')) {
    $form['persona'] = array(
      '#markup' => persona_link(),
      '#weight' => -1,
    );
  }
  if (variable_get('persona_takeover_login')) {
    unset($form['name']);
    unset($form['pass']);
    unset($form['actions']);
  }
  else {
    $form['or'] = array(
      '#markup' => t("<p>Or log in below:</p>"),
      '#weight' => 0,
    );
  }
}

/**
 * Implements hook_form_alter().
 */
function persona_form_alter(array &$form, array &$form_state, $form_id) {
  switch ($form_id) {
    case "user_profile_form":
      if (variable_get('persona_takeover_login')) {
        unset($form['account']['pass']);
        unset($form['account']['current_pass']);
        unset($form['account']['current_pass_required_values']);
        $form['account']['mail']['#description'] .= " " . t("If you change this e-mail after creating an account using Persona, you will have to re-validate your Persona e-mail.");
      }
      break;

    case "user_login":
      _persona_login_form_alter($form);
      break;

    case "user_login_block":
      _persona_login_form_alter($form);
      if (variable_get('persona_takeover_login')) {
        // Remove links to disabled menu items.
        unset($form['links']);
      }
      break;
  }
}

/**
 * Callback function to validate the persona assertion.
 */
function persona_verify() {
  global $base_url;
  global $user;
  if (isset($_POST['assertion']) && isset($_POST['token']) && ($_POST['token'] == persona_get_token('persona-secure-token'))) {
    $assertion = check_plain($_POST['assertion']);
  }
  else {
    watchdog('persona', "Bad assertion or token.", array(), WATCHDOG_ERROR);
    drupal_set_message(t("Sorry, there was a problem signing you in via Persona."), "error");
    return persona_status("error", "bad assertion or token");
  }
  // Verify the assertion via the persona API.
  $result = drupal_http_request("https://verifier.login.persona.org/verify", array(
    "method" => "POST",
    'headers' => array('Content-Type' => 'application/x-www-form-urlencoded'),
    "data" => "assertion=$assertion&audience=$base_url",
  ));
  // HTTP Status should be 200, and response should return 'okay'.
  $response = (object) drupal_json_decode($result->data);
  if ($result->code !== '200' || $response->status !== 'okay') {
    watchdog('persona', "Bad response: @response; HTTP code: @code", array('@response' => var_export((array) $response, TRUE), '@code' => $result->code), WATCHDOG_ERROR);
    drupal_set_message(t("Sorry, there was a problem signing you in via Persona."), "error");
    return persona_status("error", "response failed");
  }
  // Check to see if this user already exists.
  $account = user_load_by_mail($response->email);

  // If account exists...
  if (!empty($account)) {
    // If user is allowed to log in...
    if ($account->status == 1) {
      watchdog('persona', "Sign in to existing account by %email successful.", array('%email' => $response->email));
      persona_login_user($account);
      return persona_status("okay", array("user" => $account));
    }
    else {
      watchdog('persona', "Sign in by %email to blocked account denied.", array('%email' => $response->email), WATCHDOG_WARNING);
      drupal_set_message(t("You are not allowed to sign in at this time."), "error");
      return persona_status("error", "access denied");
    }
  }
  elseif (variable_get('user_register')) {
    // Need to create an account for this user.
    $fields = array(
      'name' => $response->email,
      'mail' => $response->email,
      'pass' => user_password(16),
      'status' => (variable_get('user_register') == USER_REGISTER_VISITORS),
      'init' => $response->email,
      'roles' => array(DRUPAL_AUTHENTICATED_RID => 'authenticated user'),
    );
    $account = user_save(array(), $fields);

    if (variable_get('user_register') == USER_REGISTER_VISITORS) {
      watchdog('persona', "Sign in to new account by %email successful.", array('%email' => $response->email));
      // Login the user.
      persona_login_user($account);
      return persona_status("okay", "");
    }
    else {
      watchdog('persona', "Account created during sign in for %email pending approval.", array('%email' => $response->email));
      _user_mail_notify('register_pending_approval', $account);
      drupal_set_message(t("Thank you for applying for an account. Your account is currently pending approval by the site administrator.<br />In the meantime, a welcome message with further instructions has been sent to your e-mail address."));
      return persona_status("error", "approval required");
    }
  }
  else {
    // Visitors cannot create accounts.
    watchdog('persona', "Attempted sign in without an account by %email.", array('%email' => $response->email), WATCHDOG_WARNING);
    drupal_set_message(t("Only administrators are permitted to register new accounts on this website."), "error");
    return persona_status("error", "access denied");
  }
}

/**
 * Logs in a user.
 */
function persona_login_user($account) {
  global $user;
  $user = $account;
  user_login_finalize();
}

/**
 * Returns a JSON string for JavaScript to use.
 *
 * @param string $status
 *   Status should be 'okay' or 'error'.
 * @param string $message
 *   Message to be sent back to JavaScript.
 *
 * @return string
 *   Returns an array to be parsed as JSON.
 */
function persona_status($status, $message = "") {
  return array(
    "status" => $status,
    "response" => $message,
  );
}

/**
 * Returns a Persona sign in link.
 */
function persona_link() {
  $classes = array("persona-login");
  switch (variable_get("persona_login_button_style")) {
    case "dark":
      $classes[] = "dark ";
      $classes[] = "persona-button ";
      break;

    case "blue":
      $classes[] = "persona-button ";
      break;

    case "orange":
      $classes[] = "orange ";
      $classes[] = "persona-button ";
      break;

  }
  $text = variable_get("persona_login_button_text");
  return l("<span>$text</span>", NULL, array(
    "attributes" => array("class" => $classes),
    "fragment" => "persona_login",
    "html" => TRUE,
  ));
}

/**
 * Creates a secure token for this user.
 *
 * @param string $value
 *   Seed to use to generate the token.
 *
 * @return string
 *   Secure token.
 *
 * @see drupal_get_token()
 */
function persona_get_token($value = '') {
  if (user_is_logged_in()) {
    return drupal_get_token($value);
  }
  return drupal_hmac_base64($value, session_api_get_sid() . drupal_get_private_key() . drupal_get_hash_salt());
}
