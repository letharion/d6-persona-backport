<?php
/**
 * @file
 * Main code file for Persona.
 */

/**
 * Implements hook_init().
 */
function persona_init() {
  global $user;
  // Make sure Internet Explorer is not in "Compatibility Mode". For
  // consistency, this is done even when not using Persona.
  // @see https://developer.mozilla.org/en-US/docs/Persona/Browser_compatibility
  drupal_add_http_header('X-UA-Compatible', 'IE=Edge');
  // Is the browser signed in?
  if (user_is_logged_in()) {
    // If the user is not signed in with Persona then do nothing.
    if (!isset($_SESSION['persona_sign_in'])) {
      return;
    }
    $settings = array(
      // Tell Persona who is signed in.
      'email' => $user->mail,
    );
  }
  else {
    $settings = array(
      // Tell Persona the browser is not signed in to this site, otherwise it
      // will issue a sign out.
      'email' => NULL,
    );
    // Add button CSS.
    drupal_add_css(drupal_get_path('module', 'persona') . '/persona-buttons.css', array(
      'every_page' => TRUE,
    ));
  }
  // Add some settings that core doesn't provide.
  // @see http://drupal.org/node/1691394
  $settings += array(
    'cleanUrls' => variable_get('clean_url'),
    'currentPath' => current_path(),
  );
  // Add JavaScript settings.
  drupal_add_js(array('persona' => $settings), 'setting');
  // Add the Javascript to talk to Persona.
  drupal_add_js(drupal_get_path('module', 'persona') . '/persona.js', array(
    'every_page' => TRUE,
  ));
  // Include the Persona JavaScript library at the bottom of the body.
  // TODO: Host this file locally once it has stabilized.
  drupal_add_js('https://login.persona.org/include.js', array(
    'type' => 'external',
    'scope' => 'footer',
  ));
}

/**
 * Implements hook_menu().
 */
function persona_menu() {
  $items['user/persona/sign-in'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'persona_sign_in',
    'delivery callback' => 'drupal_json_output',
    'access callback' => TRUE,
  );
  $items['user/persona/change-email'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'persona_change_email',
    'delivery callback' => 'drupal_json_output',
    'access callback' => TRUE,
  );
  $items['admin/config/people/persona'] = array(
    'title' => "Persona settings",
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('persona_admin_form'),
    'description' => "Configure settings for signing in with Mozilla Persona.",
    'file' => 'persona.admin.inc',
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function persona_menu_alter(&$items) {
  if (variable_get('persona_takeover_login')) {
    unset($items['user/register']);
    unset($items['user/password']);
  }
}

/**
 * Personafies login forms.
 */
function _persona_login_form_alter(array &$form) {
  if (variable_get('persona_login_display')) {
    $form['persona'] = array(
      '#markup' => persona_button(),
      '#weight' => -1,
    );
  }
  if (variable_get('persona_takeover_login')) {
    unset($form['name']);
    unset($form['pass']);
    unset($form['actions']);
  }
  else {
    $form['or'] = array(
      '#markup' => t("<p>Or log in below:</p>"),
      '#weight' => 0,
    );
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function persona_form_user_profile_form_alter(array &$form, array &$form_state, $form_id) {
  if (variable_get('persona_takeover_login')) {
    $form['account']['mail']['#type'] = 'value';
    $form['account']['mail']['#value'] = $form['account']['mail']['#default_value'];
    $form['account']['pass']['#type'] = 'value';
    $form['account']['current_pass']['#type'] = 'value';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function persona_form_user_login_alter(array &$form, array &$form_state, $form_id) {
  _persona_login_form_alter($form);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function persona_form_user_login_block_alter(array &$form, array &$form_state, $form_id) {
  _persona_login_form_alter($form);
  if (variable_get('persona_takeover_login')) {
    // Remove links to disabled menu items.
    unset($form['links']);
  }
}

/**
 * Determines if a user with a specific name already exists.
 *
 * @param string $name
 *   User name to check for.
 *
 * @return bool
 *   TRUE if the name is taken.
 */
function _persona_user_name_exists($name) {
  // Search for a user entity with the supplied name.
  $query = new EntityFieldQuery;
  return (bool) $query->entityCondition('entity_type', 'user')
    ->propertyCondition('name', $name)
    ->count()
    ->execute();
}

/**
 * Extracts a unique name from an email address.
 *
 * @param string $email
 *   Email address to extract name from.
 *
 * @return string
 *   Unique extracted name. No existing users will have this name.
 */
function _persona_extract_user_name($email) {
  // Extract the local-part from the email address.
  $name = strtok($email, '@');
  // Ensure it is unique.
  if (_persona_user_name_exists($name)) {
    $i = 2;
    do {
      $attempt = $name . '-' . $i++;

    } while (_persona_user_name_exists($attempt));
    $name = $attempt;
  }
  return $name;
}

/**
 * Verifies the Persona POST data.
 *
 * @return string
 *   Email address that the user has signed in with.
 */
function persona_verify() {
  global $base_url;
  // Ensure that a POST request was not made by a <form> being submitted as it
  // could be a Login XSRF attack. Checking for the mere presence of a
  // non-standard HTTP header is sufficient to guarantee that the request was
  // made with AJAX and therefore is protected by CORS.
  // @see http://en.wikipedia.org/wiki/Cross-origin_resource_sharing
  // @see http://www.adambarth.com/papers/2008/barth-jackson-mitchell-b.pdf 4.3
  if (!isset($_SERVER['HTTP_X_REQUESTED_WITH'])) {
    watchdog('persona', "Non-AJAX verify request made.", array(), WATCHDOG_WARNING);
    drupal_add_http_header('Status', '401 Unauthorized');
    throw new Exception();
  }
  // Get request variables.
  $request = drupal_json_decode(file_get_contents('php://input'));
  // Ensure assertion was supplied.
  if (!isset($request['assertion'])) {
    watchdog('persona', "Assertion missing.", array(), WATCHDOG_WARNING);
    drupal_add_http_header('Status', '401 Unauthorized');
    throw new Exception();
  }
  // Check XSRF token.
  if (!isset($request['token']) || ($request['token'] != persona_xsrf_token())) {
    watchdog('persona', "Bad XSRF token.", array(), WATCHDOG_WARNING);
    drupal_add_http_header('Status', '401 Unauthorized');
    throw new Exception();
  }
  // Verify assertion with Mozilla's Remote Verification API.
  // TODO: Support local verification once API has stabilized, for example with
  // https://github.com/Falco20019/php-browseridlib
  $result = (array) drupal_http_request('https://verifier.login.persona.org/verify', array(
    'method' => 'POST',
    'headers' => array('Content-Type' => 'application/json'),
    'data' => drupal_json_encode(array(
      'assertion' => $request['assertion'],
      'audience' => $base_url,
    )),
  ));
  // Get response variables.
  $response = drupal_json_decode($result['data']);
  // HTTP status should be 200, and verification status should be 'okay'.
  if (($result['code'] != 200) || !isset($response['status']) || ($response['status'] != 'okay')) {
    watchdog('persona', "Bad response: @response; HTTP status: @code", array(
      '@response' => var_export($response, TRUE),
      '@code' => $result['code'],
    ), WATCHDOG_ERROR);
    drupal_add_http_header('Status', '502 Bad Gateway');
    throw new Exception();
  }
  // Return email address obtained from assertion.
  return $response['email'];
}

/**
 * Attempts to sign into an existing account.
 *
 * @param $account
 *   Account to sign into.
 */
function _persona_existing_account_sign_in($account) {
  if ($account->status == 1) {
    watchdog('persona', "Sign into existing account by %email successful.", array('%email' => $account->mail));
    persona_login_user($account);
    drupal_add_http_header('Status', '200 OK');
  }
  else {
    watchdog('persona', "Sign in by %email to blocked account denied.", array('%email' => $account->mail), WATCHDOG_WARNING);
    drupal_set_message(t("You are not allowed to sign in at this time."), 'error');
    drupal_add_http_header('Status', '403 Forbidden');
    throw new Exception();
  }
}

/**
 * Callback function to sign in with Persona.
 */
function persona_sign_in() {
  // Check if we are already signed in. Verification may have already happened
  // from another tab in the same browser, or account email address may be
  // being changed in another tab.
  if (user_is_logged_in()) {
    drupal_add_http_header('Status', '409 Conflict');
    return;
  }
  // Obtain email address from Persona.
  try {
    $email = persona_verify();
  }
  catch (Exception $e) {
    drupal_set_message(t("Sorry, there was a problem signing you in with Persona."), 'error');
    return;
  }

  // Check to see if this user already exists.
  $account = user_load_by_mail($email);

  // If account exists...
  if (!empty($account)) {
    try {
      _persona_existing_account_sign_in($account);
    }
    catch (Exception $e) {}
  }
  elseif (variable_get('user_register')) {
    // Create an account for this user.
    $fields = array(
      'name' => _persona_extract_user_name($email),
      'pass' => user_password(16),
      'mail' => $email,
      'access' => REQUEST_TIME,
      'status' => (variable_get('user_register') == USER_REGISTER_VISITORS),
      'init' => $email,
    );
    $account = user_save(drupal_anonymous_user(), $fields);
    // Reload the account to get full object and prevent warnings.
    $account = user_load($account->uid);
    // Can new accounts be signed into without approval?
    if (variable_get('user_register') == USER_REGISTER_VISITORS) {
      watchdog('persona', "Sign in to new account by %email successful.", array('%email' => $email));
      // Login the user.
      persona_login_user($account);
      drupal_add_http_header('Status', '201 Created');
      // Redirect to account edit page if new accounts are set to do so.
      if (variable_get('persona_new_account_edit')) {
        return $account->uid;
      }
    }
    else {
      watchdog('persona', "Account created during sign in by %email pending approval.", array('%email' => $email));
      _user_mail_notify('register_pending_approval', $account);
      drupal_set_message(t("Thank you for applying for an account. Your account is currently pending approval by the site administrator.<br />In the meantime, a welcome message with further instructions has been sent to your e-mail address."));
      drupal_add_http_header('Status', '403 Forbidden');
    }
  }
  else {
    // Visitors cannot create accounts.
    watchdog('persona', "Attempted sign in without an account by %email.", array('%email' => $email), WATCHDOG_WARNING);
    drupal_set_message(t("Only administrators are permitted to register new accounts on this website."), 'error');
    drupal_add_http_header('Status', '403 Forbidden');
  }
}

/**
 * Callback function to change email address with Persona.
 */
function persona_change_email() {
  global $user;
  // Make sure the browser is signed in.
  if (user_is_logged_in()) {
    try {
      // Obtain email address from Persona.
      $email = persona_verify();
      // Check if the user is using this email address in another account.
      $account = user_load_by_mail($email);
      if ($account) {
        // Sign into existing account as it is all we can do...
        try {
          _persona_existing_account_sign_in($account);
          drupal_set_message(t("You are already using %email for another account, which you have now been signed into.", 
            array('%email' => $user->mail)), 'error');
        }
        catch (Exception $e) {}
      }
      else {
        // Update user's email address.
        $user->mail = $email;
        user_save($user);
        watchdog('persona', "%name changed email address to %email.", array(
          '%name' => $user->name,
          '%email' => $user->mail,
        ));
        drupal_set_message(t("Your email address has been changed to %email.", array('%email' => $user->mail)));
        drupal_add_http_header('Status', '200 OK');
      }
    }
    catch (Exception $e) {
      drupal_set_message(t("Sorry, there was a problem changing your email address with Persona."), 'error');
    }
  }
  else {
    // The user was probably signed out because they clicked "This is not me"
    // when there was another browser tab open on the site. Try to sign them in.
    persona_sign_in();
  }
}

/**
 * Logs in a user.
 */
function persona_login_user($account) {
  global $user;
  $user = $account;
  user_login_finalize();
  // Store in the session the fact that the user signed in with Persona.
  $_SESSION['persona_sign_in'] = TRUE;
}

function _persona_add_settings() {
  // Make sure the settings only get added once.
  $added = &drupal_static(__FUNCTION__);
  if ($added) {
    return;
  }
  $settings = array(
    // Token to prevent login XSRF.
    'token' => persona_xsrf_token(),
    // Add site name to display on Persona form.
    'siteName' => variable_get('site_name'),
  );
  // Add the legal documents if they are both provided.
  if ((variable_get('persona_terms_link') != '') &&
    (variable_get('persona_privacy_link') != ''))
  {
    $settings += array(
      'termsOfService' => url(variable_get('persona_terms_link'), array('absolute' => TRUE)),
      'privacyPolicy' => url(variable_get('persona_privacy_link'), array('absolute' => TRUE)),
    );
  }
  // Site logo can only be displayed on Persona login form if it can be served
  // over HTTPS.
  if (!empty($_SERVER['HTTPS']) && theme_get_setting('logo') != '') {
    $settings['site_logo'] = theme_get_setting('logo');
  }
  // Add JavaScript settings.
  drupal_add_js(array('persona' => $settings), 'setting');
  $added = TRUE;
}

/**
 * Generates a Persona button and adds necessary JavaScript settings.
 *
 * @param bool $sign_in
 *   Whether the button should be a Sign In button (default). Otherwise it will
 *   be a Change Email button.
 *
 * @return string
 *   HTML of generated button.
 */
function persona_button($sign_in = TRUE) {
  // Add JavaScript settings.
  _persona_add_settings();
  // Determine CSS classes and text.
  if ($sign_in) {
    $classes = array('persona-sign-in');
    $text = variable_get('persona_button_text_sign_in');
  }
  else {
    $classes = array('persona-change-email');
    $text = variable_get('persona_button_text_change_email');
  }
  $style = variable_get('persona_button_style');
  if ($style != '') {
    $classes[] = 'persona-button';
    $classes[] = $style;
  }
  // Generate HTML.
  $html = '<div style="cursor: pointer;" class="' . implode(' ', $classes) . '"><span>';
  $html .= check_plain($text);
  $html .= '</span></div>';
  return $html;
}

/**
 * Implements hook_menu_link_alter().
 */
function persona_menu_link_alter(array &$item) {
  // Add persona-logout class to logout menu item.
  if ($item['link_path'] == 'user/logout') {
    $item['options']['attributes']['class'][] = 'persona-logout';
  }
}

/**
 * Implements hook_page_alter().
 */
function persona_page_alter(array &$page) {
  // Add a pre-render function to the toolbar.
  if (isset($page['page_top']['toolbar'])) {
    $page['page_top']['toolbar']['#pre_render'][] = 'persona_toolbar_pre_render';
  }
}

/**
 * Adds persona-logout class to toolbar logout link.
 */
function persona_toolbar_pre_render(array $toolbar) {
  $toolbar['toolbar_user']['#links']['logout']['attributes']['class'][] = 'persona-logout';
  return $toolbar;
}

/**
 * Implements hook_user_view().
 */
function persona_user_view($account) {
  global $user;
  // If the user is not signed in with Persona or a different user is being
  // displayed then do nothing.
  if (!isset($_SESSION['persona_sign_in']) || ($account->uid != $user->uid)) {
    return;
  }
  // Add the Change Email button.
  $account->content['persona'] = array('#markup' => persona_button(FALSE));
  // Add the button CSS.
  $account->content['#attached']['css'][] = drupal_get_path('module', 'persona') . '/persona-buttons.css';
}

/**
 * Creates a secure token for preventing Login XSRF.
 *
 * @return string
 *   Secure token.
 *
 * @see drupal_get_token()
 * @see http://www.adambarth.com/papers/2008/barth-jackson-mitchell-b.pdf
 */
function persona_xsrf_token() {
  return drupal_hmac_base64('persona-xsrf-token', session_api_get_sid() . drupal_get_private_key() . drupal_get_hash_salt());
}
